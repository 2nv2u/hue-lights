'use strict';

/**
 * extension hue-lights menu
 * JavaScript Gnome extension for Philips Hue bridges - Menu creator.
 *
 * @author Václav Chlumský
 * @copyright Copyright 2020, Václav Chlumský.
 */

 /**
 * @license
 * The MIT License (MIT)
 *
 * Copyright (c) 2020 Václav Chlumský
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

const ExtensionUtils = imports.misc.extensionUtils;
const Me = ExtensionUtils.getCurrentExtension();
const Hue = Me.imports.phue;
const Utils = Me.imports.utils;
const ColorPicker = Me.imports.colorpicker;
const Util = imports.misc.util;
const Main = imports.ui.main;
const PanelMenu = imports.ui.panelMenu;
const PopupMenu = imports.ui.popupMenu;
const St = imports.gi.St;
const Gio = imports.gi.Gio;
const GObject = imports.gi.GObject;
const Lang = imports.lang;
const Slider = imports.ui.slider;
const Atk = imports.gi.Atk;

const Gettext = imports.gettext;
const _ = Gettext.gettext;

const PhueMenuPosition = {
    CENTER: 0,
    RIGHT: 1,
    LEFT: 2
};

/**
 * PhueMenu class. Provides widget with menu items.
 * 
 * @class PhueMenu
 * @constructor
 * @return {Object} menu widget instance
 */
var PhueMenu = GObject.registerClass({
     GTypeName: 'PhueMenu'
}, class PhueMenu extends PanelMenu.Button {

    /**
     * PhueMenu class initialization
     *  
     * @method _init
     * @private
     */
    _init() {
        super._init(0.0, Me.metadata.name, false);

        this.refreshMenuObjects = {};
        this._settings = ExtensionUtils.getSettings(Utils.HUELIGHTS_SETTINGS_SCHEMA);
        this._settings.connect("changed", Lang.bind(this, function() {
            this.readSettings();
            this.setPositionInPanel();
            this.hue.checkBridges();
            this.rebuildMenu();
        }));

        this.hue = new Hue.Phue();

        this.readSettings();
        this._indicatorPositionBackUp = -1;
        this.setPositionInPanel();

        this.bridesData = this.hue.checkBridges();

        this.colorPicker = null;

        let icon = new St.Icon({
            gicon : Gio.icon_new_for_string(Me.dir.get_path() + '/media/devicesBridgesV2white.svg'),
            style_class : 'system-status-icon',
            });
        this.add_child(icon);

        this.rebuildMenu();

        this.menu.connect("open-state-changed", () => {if (this.menu.isOpen) {this.refreshMenu();}});
    }

    /**
     * Reads settings into class variables.
     * 
     * @method readSettings
     */
    readSettings() {

        this.hue.bridges = this._settings.get_value(Utils.HUELIGHTS_SETTINGS_BRIDGES).deep_unpack();
        this._indicatorPosition = this._settings.get_enum(Utils.HUELIGHTS_SETTINGS_INDICATOR);
        this._zonesFirst = this._settings.get_boolean(Utils.HUELIGHTS_SETTINGS_ZONESFIRST);
    }

    /**
     * Generate almoust useless ID number
     * 
     * @method _rndID
     * @private
     * @return {Number} randomly generated number
     */
    _rndID () {

        /* items in this.refreshMenuObjects may occure more then ones,
            * this way it is possible - otherwise, the ID is useless
            */
        return Math.round((Math.random()*1000000));
    }

    /**
     * Handles events generated by color picker.
     * 
     * @method _menuEventColor
     * @private
     */
    _menuEventColor() {
        this.colorData["type"] = "set-color";
        this._menuEventHandler(this.colorData);
        this.colorData["type"] = "select-color";
    }

    /**
     * Handles events generated by menu items.
     * 
     * @method _menuEventHandler
     * @private
     * @param {Object} dictionary with instruction what to do
     */
    _menuEventHandler(data) {

        let bridgeid = data["bridgeid"];
        let type = data["type"];
        let object = data["object"];
        let hueId = data["hueId"];
        let lights;
        let sHueId = [];
        let value;
        let cmd = "";

        this.bridesData = this.hue.checkBridges();

        sHueId = hueId.split("::");

        switch(type) {

            case "switch":
                sHueId[2] = parseInt(sHueId[2]);

                value = object.state;

                if (sHueId[1] == "groups") {
                    lights = this.bridesData[bridgeid]["groups"][sHueId[2]]["lights"];
                }

                if (sHueId[1] == "lights") {
                    lights = sHueId[2];
                }

                this.hue.instances[bridgeid].setLights(lights, {"on": value});
                break;

            case "slider":

                sHueId[2] = parseInt(sHueId[2]);

                value = Math.round(object.value * 254);

                if (sHueId[1] == "groups") {
                    lights = this.bridesData[bridgeid]["groups"][sHueId[2]]["lights"];
                    for (let light in lights) {
                        if (value == 0) {
                            cmd = {"on": false, "bri": value};
                        } else {
                            cmd = {"on": true, "bri": value};
                        }

                        this.hue.instances[bridgeid].setLights(parseInt(lights[light]), cmd);
                    }
                }

                if (sHueId[1] == "lights") {
                    lights = sHueId[2];
                    if (value == 0) {
                        cmd = {"on": false, "bri": value};
                    } else {
                        cmd = {"on": true, "bri": value};
                    }

                    this.hue.instances[bridgeid].setLights(lights, cmd);
                }

                break;

            case "select-color":

                this.colorData = data;

                if (this.colorPicker !== null) {
                    this.colorPicker.destroy();
                }
                this.colorPicker = new ColorPicker.ColorPicker();
                this.colorPicker.show_all();
                this.colorPicker.connect("finish", () => {this.colorPicker = null; });
                this.colorPicker.connect('color-picked', this._menuEventColor.bind(this));
                this.colorPicker.newPosition();

                break;

            case "set-color":

                sHueId[2] = parseInt(sHueId[2]);

                value = Utils.getRGBtoHueXY(this.colorPicker.r, this.colorPicker.g, this.colorPicker.b);

                if (sHueId[1] == "groups") {
                    lights = this.bridesData[bridgeid]["groups"][sHueId[2]]["lights"];

                    for (let light in lights) {
                        if (value == 0) {
                            cmd = {"on": false, "xy": value};
                        } else {
                            cmd = {"on": true, "xy": value};
                        }

                        this.hue.instances[bridgeid].setLights(parseInt(lights[light]), cmd);
                    }
                }

                if (sHueId[1] == "lights") {
                    lights = sHueId[2];
                    if (value == 0) {
                        cmd = {"on": false, "xy": value};
                    } else {
                        cmd = {"on": true, "xy": value};
                    }

                    this.hue.instances[bridgeid].setLights(lights, cmd);
                }
                break;

            default:
        }

        this.refreshMenu();
    }

    /**
     * Creates last item in menu hierarchy with all the controls.
     * 
     * @method _createLight
     * @private
     * @param {String} bridgeid which bridge we use here
     * @param {Object} dictionary data for the bridgeid
     * @param {Number} lightid of created light (not used if groupid provided)
     * @param {Number} groupid creates menu item for all lights (not mandatory)
     * @return {Object} menuitem with light controls
     */
    _createLight(bridgeid, data, lightid, groupid) {

        let light;
        let slider;
        let hueId = "";
        let switchBox;
        let switchButton

        if (groupid !== null) {
            light = new PopupMenu.PopupMenuItem(_("All"));
        } else {
            light = new PopupMenu.PopupMenuItem(data["lights"][lightid]["name"]);
        }

        if (groupid !== null) {
            hueId = `${this._rndID()}::groups::${groupid}::action::hue`;
        } else {
            hueId = `${this._rndID()}::lights::${lightid}::state::hue`;
        }

        light.connect('button-press-event', this._menuEventHandler.bind(this, {"hueId": hueId, "bridgeid": bridgeid, "object":light, "type": "select-color"}));

        light.set_x_align(St.Align.START);
        light.label.set_x_expand(true);

        if ((groupid === null && data["lights"][lightid]["state"]["bri"] !== undefined) ||
            (groupid !== null && data["groups"][groupid]["action"]["bri"] !== undefined)) {
            slider = new Slider.Slider(0);
            slider.set_width(200);
            slider.set_x_align(St.Align.END);
            slider.set_x_expand(false);
            slider.value = 100/254;
            if (groupid !== null) {
                hueId = `${this._rndID()}::groups::${groupid}::action::bri`;
            } else {
                hueId = `${this._rndID()}::lights::${lightid}::state::bri`;
            }

            slider.connect("drag-end", this._menuEventHandler.bind(this, {"hueId": hueId, "bridgeid": bridgeid, "object":slider, "type": "slider"}));

            this.refreshMenuObjects[hueId] = {"bridgeid": bridgeid, "object":slider, "type": "slider"}

            light.add(slider);
        }

        if (groupid !== null) {
            hueId = `${this._rndID()}::groups::${groupid}::state::all_on`;
        } else {
            hueId = `${this._rndID()}::lights::${lightid}::state::on`;
        }
        switchBox = new PopupMenu.Switch(false);
        switchButton = new St.Button({reactive: true, can_focus: true});
        switchButton.set_x_align(St.Align.END);
        switchButton.set_x_expand(false);
        switchButton.child = switchBox;
        switchButton.connect("button-press-event",  Lang.bind(this, function() {
            switchBox.toggle();
        }));
        switchButton.connect("button-press-event", this._menuEventHandler.bind(this, {"hueId": hueId, "bridgeid": bridgeid, "object":switchBox, "type": "switch"}));

        this.refreshMenuObjects[hueId] = {"bridgeid": bridgeid, "object":switchBox, "type": "switch"}

        light.add(switchButton);

        return light;
    }

    /**
     * Creates array of menu item with light controls.
     * 
     * @method _createMenuLights
     * @private
     * @param {String} bridgeid which bridge we use here
     * @param {Object} dictionary data for the bridgeid
     * @param {Number} lightid of created light (not used if groupid provided)
     * @param {Number} groupid creates menu item for all lights (not mandatory)
     * @return {Object} array of menuitem with light controls
     */
    _createMenuLights(bridgeid, data, lights, groupid) {

        let lightsItems = [];
        let light;

        if (lights.length === 0) {
            return [];
        }

        light = this._createLight(bridgeid, data, lights, groupid);
        lightsItems.push(light);

        for (let lightid in lights) {
            light = this._createLight(bridgeid, data, parseInt(lights[lightid]), null);
            lightsItems.push(light);
        }

        return lightsItems;
    }

    _createGroupSwitch(bridgeid, groupid) {
        let switchBox;
        let switchButton;

        let hueId = `${this._rndID()}::groups::${groupid}::state::any_on`;

        switchBox = new PopupMenu.Switch(false);
        switchButton = new St.Button({reactive: true, can_focus: true});
        switchButton.set_x_align(St.Align.START);
        switchButton.set_x_expand(false);
        switchButton.child = switchBox;
        switchButton.connect("button-press-event",  Lang.bind(this, function() {
            switchBox.toggle();
        }));
        switchButton.connect("button-press-event", this._menuEventHandler.bind(this, {"hueId": hueId, "bridgeid": bridgeid, "object":switchBox, "type": "switch"}));

        this.refreshMenuObjects[hueId] = {"bridgeid": bridgeid, "object":switchBox, "type": "switch"}

        return switchButton;
    }

    /**
     * Creates array of submenus for groups of bridge.
     * 
     * @method _createMenuGroups
     * @private
     * @param {String} bridgeid which bridge we use here
     * @param {Object} dictionary data for the bridgeid
     * @param {String} "Zone" or "Room"
     * @return {Object} array of submenus
     */
    _createMenuGroups(bridgeid, data, groupType) {

        let groupItem;
        let menuItems = [];

        if (data["groups"] === undefined) {
            return [];
        }

        for (let groupid in data["groups"]) {
            if (data["groups"][groupid]["type"] !== groupType) {
                continue;
            }

            groupItem = new PopupMenu.PopupSubMenuMenuItem(data["groups"][groupid]["name"]);


            groupItem.add(this._createGroupSwitch(bridgeid, groupid));

            menuItems.push(groupItem);

            let lightItems = this._createMenuLights(bridgeid, data, data["groups"][groupid]["lights"], groupid);
            for (let lightItem in lightItems) {
                groupItem.menu.addMenuItem(lightItems[lightItem]);
            }
        }

        return menuItems;
    }

    /**
     * Creates array of submenus for bridge.
     * 
     * @method _createMenuBridge
     * @private
     * @param {String} bridgeid which bridge we use here
     * @return {Object} array of bridge label and submenus of the bridge
     */
    _createMenuBridge(bridgeid) {

        let items = [];
        let data = {};

        data = this.hue.instances[bridgeid].getAll();

        if (data["config"] === undefined) {
            return [];
        }

        items.push(new PopupMenu.PopupMenuItem(data["config"]["name"], { hover: false, reactive: false, can_focus: false }));

        if (this._zonesFirst) {
            items = items.concat(this._createMenuGroups(bridgeid, data, "Zone"));
            items = items.concat(this._createMenuGroups(bridgeid, data, "Room"));
        } else {
            items = items.concat(this._createMenuGroups(bridgeid, data, "Room"));
            items = items.concat(this._createMenuGroups(bridgeid, data, "Zone"));
        }

        return items;
    }

    /**
     * If change happened, the controls in menu are refreshed.
     * 
     * @method refreshMenu
     */
    refreshMenu() {

        let bridgeid = "";
        let type = "";
        let object = null;
        let sHueId = [];
        let value;

        for (bridgeid in this.hue.instances) {
            this.bridesData[bridgeid] = this.hue.instances[bridgeid].getAll();
        }

        for (let hueId in this.refreshMenuObjects) {

            bridgeid = this.refreshMenuObjects[hueId]["bridgeid"];
            object = this.refreshMenuObjects[hueId]["object"];
            type = this.refreshMenuObjects[hueId]["type"];

            sHueId = hueId.split("::");

            switch (type) {

                case "switch":

                    sHueId[2] = parseInt(sHueId[2]);

                    value = this.bridesData[bridgeid];
                    for (let i in sHueId) {
                        if (i == 0) {
                            continue;
                        }

                        value = value[sHueId[i]];
                    }

                    if (object.state !== value) {
                        object.state = value;
                    }
                    break;

                case "slider":

                    sHueId[2] = parseInt(sHueId[2]);

                    value = this.bridesData[bridgeid];
                    for (let i in sHueId) {
                        if (i == 0) {
                            continue;
                        }

                        value = value[sHueId[i]];
                    }

                    value = value/255;

                    if (object.value !== value) {
                        object.value = value;
                    }
                    break;

                default:
            }
        }
    }

    /**
     * Rebuild the menu from scratch
     * 
     * @method rebuildMenu
     */
    rebuildMenu() {

        let bridgeItems = [];
        let oldItems = this.menu._getMenuItems();

        this.refreshMenuObjects = {};

        for (let item in oldItems){
            oldItems[item].destroy();
        }

        for (let bridgeid in this.hue.instances) {

            bridgeItems = this._createMenuBridge(bridgeid);

            for (let item in bridgeItems) {
                this.menu.addMenuItem(bridgeItems[item]);
            }

            this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
        }

        let refreshMenuItem = new PopupMenu.PopupMenuItem(_("Refresh menu"));
        refreshMenuItem.connect('button-press-event', () => { this.rebuildMenu() });
        this.menu.addMenuItem(refreshMenuItem);

        let prefsMenuItem = new PopupMenu.PopupMenuItem(_("Settings"));
        prefsMenuItem.connect('button-press-event', () => { Util.spawn(["gnome-shell-extension-prefs", Me.uuid]); });
        this.menu.addMenuItem(prefsMenuItem);

        this.refreshMenu();
    }

    /**
     * Check and change indicator position in menu.
     * 
     * @method setPositionInPanel
     * @param {Enum} new position in panel
     */
    setPositionInPanel(position) {

        let children = null;

        if (this._indicatorPositionBackUp === this._indicatorPosition) {
            return;
        }

        this.get_parent().remove_actor(this);

        switch (this._indicatorPosition) {

            case PhueMenuPosition.LEFT:

                children = Main.panel._leftBox.get_children();
                Main.panel._leftBox.insert_child_at_index(this, children.length);
                break;

            case PhueMenuPosition.CENTER:

                children = Main.panel._centerBox.get_children();
                Main.panel._centerBox.insert_child_at_index(this, children.length);
                break;

            case PhueMenuPosition.RIGHT:

                children = Main.panel._rightBox.get_children();
                Main.panel._rightBox.insert_child_at_index(this, 0);
                break;

            default:
                children = Main.panel._rightBox.get_children();
                Main.panel._rightBox.insert_child_at_index(this, 0);
        }

        this._indicatorPositionBackUp = this._indicatorPosition;
    }
});
